{
  stdenv,
  lib,
  fetchFromGitHub,
  buildMozillaMach,
  nixosTests,
  deno,
}:

let
  applicationName = "Floorp";
  version = "12.1.3";

  floorpSrc = fetchFromGitHub {
    owner = "Floorp-Projects";
    repo = "Floorp";
    rev = "v${version}";
    hash = "sha256-TOTfzem2V7DKuUlkPGDZ/X7pIqhD/ElWWFOav0XLj2w=";
    fetchSubmodules = true;
  };

  floorp-ui-deps = stdenv.mkDerivation {
    pname = "floorp-ui-deno-deps";
    inherit version;

    src = floorpSrc;

    outputHashMode = "recursive";
    outputHashAlgo = "sha256";
    outputHash = "sha256-9vlTR9jFqSId1Un6erxBuxiMyo3WJNUHGzz/19Q5ZMw=";

    nativeBuildInputs = [ deno ];

    buildPhase = ''
      HOME=$(mktemp -d)
      export HOME

      deno install --frozen
      rm node_modules/vitest-noraneko node_modules/@nora/solid-xul
    '';

    installPhase = ''
      mkdir -p $out
      mv node_modules $out/node_modules
      mv $HOME/.cache/deno $out/deno-cache
    '';
  };

  # TODO: use `buildDenoPackage` once
  # https://github.com/NixOS/nixpkgs/pull/419255 is merged
  floorp-ui = stdenv.mkDerivation {
    pname = "floorp-ui";
    inherit version;

    src = floorpSrc;

    postPatch = ''
      HOME=$(mktemp -d)
      export HOME

      # Fix .desktop files for PWAs generated by Floorp
      # The executable path returned by Services.dirsvc.get() is absolute and
      # thus is the full /nix/store/[..] path. To avoid breaking PWAs with each
      # update, rely on `floorp` being in $PATH, as before.
      substituteInPlace src/apps/modules/src/modules/pwa/supports/Linux.sys.mts \
        --replace-fail 'Services.dirsvc.get("XREExeF",Ci.nsIFile).path' '"floorp"'

      cp -r ${floorp-ui-deps}/node_modules node_modules
      chmod -R u+w node_modules

      mkdir -p $HOME/.cache
      cp -r ${floorp-ui-deps}/deno-cache $HOME/.cache/deno
      chmod -R u+w $HOME/.cache/deno

      ln -s src/packages/vitest-noraneko node_modules/vitest-noraneko
      ln -s src/packages/solid-xul node_modules/@nora/solid-xul
    '';

    nativeBuildInputs = [ deno ];

    NODE_ENV = "production";

    buildPhase = ''
      deno install --frozen
      deno task build --write-version
      deno task build --release-build-before
    '';

    disallowedReferences = [ floorp-ui-deps ];

    installPhase = ''
      cp -r _dist/ $out/
    '';
  };
in
(
  (buildMozillaMach {
    pname = "floorp";
    inherit applicationName;
    packageVersion = version;
    binaryName = "floorp";
    branding = "browser/branding/floorp-official";
    requireSigning = false;
    allowAddonSideload = true;

    # Must match the contents of `browser/config/version.txt` in the source tree
    version = "142.0.1";

    src = fetchFromGitHub {
      owner = "Floorp-Projects";
      repo = "Floorp-runtime";
      rev = "passed-20250822184326";
      hash = "sha256-JW1IdXrMTiJY59mrS35/M09OHIJY6AdZEDPhBeJ5aXA=";
    };

    extraConfigureFlags = [
      "--with-app-basename=${applicationName}"
      "--with-unsigned-addon-scopes=app,system"
      "--enable-proxy-bypass-protection"
      # "--enable-chrome-format=flat"
    ];

    extraPostPatch = ''
      rmdir floorp
      ln -svf ${floorpSrc} floorp
      cp -r ${floorpSrc}/gecko/branding/* browser/branding/
      ls -lah . floorp/ floorp/gecko/config
    '';

    extraPassthru = {
      inherit floorp-ui;
    };

    updateScript = ./update.sh;

    meta = {
      description = "Fork of Firefox that seeks balance between versatility, privacy and web openness";
      homepage = "https://floorp.app/";
      maintainers = with lib.maintainers; [ christoph-heiss ];
      platforms = lib.platforms.unix;
      broken = stdenv.buildPlatform.is32bit;
      # since Firefox 60, build on 32-bit platforms fails with "out of memory".
      # not in `badPlatforms` because cross-compilation on 64-bit machine might work.
      maxSilent = 14400; # 4h, double the default of 7200s (c.f. #129212, #129115)
      license = lib.licenses.mpl20;
      mainProgram = "floorp";
    };

    tests = {
      inherit (nixosTests) floorp;
    };
  }).override
  {
    # Upstream build configuration can be found at
    # .github/workflows/src/linux/shared/mozconfig_linux_base
    privacySupport = true;
    webrtcSupport = true;
    enableOfficialBranding = false;
    geolocationSupport = true;
    # https://github.com/NixOS/nixpkgs/issues/418473
    ltoSupport = false;
    pgoSupport = false;
  }
).overrideAttrs
  (prev: {
    MOZ_DATA_REPORTING = "";
    MOZ_TELEMETRY_REPORTING = "";
  })
